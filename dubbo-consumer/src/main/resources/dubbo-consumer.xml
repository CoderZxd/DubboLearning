<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--dubbo应用程序命名-->
    <dubbo:application name="dubbo-demo-consumer"/>

    <!--dubbo注册地址-->
    <dubbo:registry address="zookeeper://192.168.33.117:2181"/>

    <!--接口引用-->
    <!-- 集群模式 -->
    <!--Failover Cluster:失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries="2" 来设置重试次数(不含第一次)-->

    <!--Failfast Cluster-->
    <!--快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。-->

    <!--Failsafe Cluster-->
    <!--失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。-->

    <!--Failback Cluster-->
    <!--失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。-->

    <!--Forking Cluster-->
    <!--并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks="2" 来设置最大并行数。-->

    <!--Broadcast Cluster-->
    <!--广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。-->


    <!--负载均衡策略-->
    <!--在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 random 随机调用。-->
    <!--Random LoadBalance-->
    <!--随机，按权重设置随机概率。-->
    <!--在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。-->

    <!--RoundRobin LoadBalance-->
    <!--轮询，按公约后的权重设置轮询比率。-->
    <!--存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。-->

    <!--LeastActive LoadBalance-->
    <!--最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。-->
    <!--使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。-->

    <!--ConsistentHash LoadBalance-->
    <!--一致性 Hash，相同参数的请求总是发到同一提供者。-->
    <!--当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。-->
    <!--算法参见：http://en.wikipedia.org/wiki/Consistent_hashing-->
    <!--缺省只对第一个参数 Hash，如果要修改，请配置 <dubbo:parameter key="hash.arguments" value="0,1" />-->
    <!--缺省用 160 份虚拟节点，如果要修改，请配置 <dubbo:parameter key="hash.nodes" value="320" />-->
<!--    结果缓存

    结果缓存，用于加速热门数据的访问速度，Dubbo 提供声明式缓存，以减少用户加缓存的工作量。

    缓存类型

    lru 基于最近最少使用原则删除多余缓存，保持最热的数据被缓存。
    threadlocal 当前线程缓存，比如一个页面渲染，用到很多 portal，每个 portal 都要去查用户信息，通过线程缓存，可以减少这种多余访问。
    jcache 与 JSR107 集成，可以桥接各种缓存实现-->
    <!--<dubbo:reference interface="com.zxd.dubbo.learning.api.DemoService" id="demoService" retries="2" loadbalance="random" cache="lru"/>-->

<!--    使用泛化调用
    泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况，参数及返回值中的所有 POJO 均用 Map 表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过 GenericService 调用所有服务实现。
    通过 Spring 使用泛化调用
    在 Spring 配置申明 generic="true"-->
    <!--异步调用 async="true" -->
    <!--actives="10":每客户端并发执行（或占用连接的请求数）不能超过 10 个-->
    <dubbo:reference interface="com.zxd.dubbo.learning.api.DemoService" id="demoService" retries="2" loadbalance="random" async="true" actives="10"/>
    <dubbo:reference interface="com.zxd.dubbo.learning.api.DemoService" id="demoService2" retries="2" loadbalance="random" generic="true"/>
    <dubbo:reference id="callbackService" interface="com.zxd.dubbo.learning.api.CallbackService" />

    <!--如果是线上需求需要点对点，可在 <dubbo:reference> 中配置 url 指向提供者，将绕过注册中心，多个地址用分号隔开-->
    <!--<dubbo:reference id="demoService" interface="com.zxd.dubbo.learning.api.DemoService" url="dubbo://localhost:20880"/>-->
</beans>