<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--dubbo应用程序命名-->
    <!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识-->
    <dubbo:application name="dubbo-demo-provider" owner="CoderZZ"/>

    <!--dubbo注册地址-->
    <!--禁用注册配置-->
    <!--<dubbo:registry address="zookeeper://localhost:2181" register="false" />-->
    <!--<dubbo:registry address="zookeeper://localhost:2181?register=false" />-->
    <!--禁用订阅配置-->
    <!--<dubbo:registry id="qdRegistry" address="10.20.141.150:9090" subscribe="false" />-->
    <!--<dubbo:registry id="qdRegistry" address="10.20.141.150:9090?subscribe=false" />-->
    <dubbo:registry address="zookeeper://localhost:2181"/>

    <!--dubbo协议地址-->
    <!-- 用dubbo协议在20880端口暴露服务 -->

    <!--Dispatcher-->
    <!--all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。-->
    <!--direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。-->
    <!--message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。-->
    <!--execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。-->
    <!--connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。-->

    <!--ThreadPool-->
    <!--fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)-->
    <!--cached 缓存线程池，空闲一分钟自动删除，需要时重建。-->
    <!--limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。-->
    <!--eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)-->
    <dubbo:protocol name="dubbo" port="20880" dispatcher="all" threadpool="fixed" threads="100"/>

    <!--接口声明-->
    <dubbo:service interface="com.zxd.dubbo.learning.api.DemoService" ref="demoServiceImpl" />

    <!--具体实现该接口的 bean-->
    <bean id="demoServiceImpl" class="com.zxd.dubbo.learning.provider.DemoServiceImpl"/>
</beans>