<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--dubbo应用程序命名-->
    <!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识-->
    <dubbo:application name="dubbo-demo-provider" owner="CoderZZ"/>

    <!--dubbo注册地址-->
    <!--禁用注册配置-->
    <!--<dubbo:registry address="zookeeper://localhost:2181" register="false" />-->
    <!--<dubbo:registry address="zookeeper://localhost:2181?register=false" />-->
    <!--禁用订阅配置-->
    <!--<dubbo:registry id="qdRegistry" address="10.20.141.150:9090" subscribe="false" />-->
    <!--<dubbo:registry id="qdRegistry" address="10.20.141.150:9090?subscribe=false" />-->
    <dubbo:registry id="qingdaoRegistry" address="zookeeper://192.168.33.117:2181" default="true"/>
    <!--多注册中心
    Dubbo 支持同一服务向多注册中心同时注册，或者不同服务分别注册到不同的注册中心上去，甚至可以同时引用注册在不同注册中心上的同名服务。另外，注册中心是支持自定义扩展的-->
    <!--<dubbo:registry id="hangzhouRegistry" address="zookeeper://localhost:2182"/>-->

    <!--dubbo协议地址-->
    <!-- 用dubbo协议在20880端口暴露服务 -->

    <!--Dispatcher-->
    <!--all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。-->
    <!--direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。-->
    <!--message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。-->
    <!--execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。-->
    <!--connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。-->

    <!--ThreadPool-->
    <!--fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)-->
    <!--cached 缓存线程池，空闲一分钟自动删除，需要时重建。-->
    <!--limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。-->
    <!--eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)-->

    <!--不同服务不同协议
    不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议-->
    <!--服务端连接控制-->
    <!--限制服务器端接受的连接不能超过 10 个：-->
    <!--accepts="10-->
    <!--状态检查扩展-->
    <!--http://dubbo.apache.org/zh-cn/docs/dev/impls/status-checker.html-->
    <dubbo:protocol name="dubbo" port="20880" dispatcher="all" threadpool="fixed" threads="100" accepts="10" status="test"/>
    <!--<dubbo:protocol name="rmi" port="1099" />-->
    <!--<dubbo:protocol name="hessian" port="8080" />-->

    <!--接口声明-,多协议暴露服务-->
    <!-- 向多个注册中心注册 -->
    <!--<dubbo:service interface="com.zxd.dubbo.learning.api.DemoService" ref="demoServiceImpl" protocol="dubbo,hessian" registry="qingdaoRegistry,hangzhouRegistry"/>-->
    <!--并发控制-->
    <!--executes="10":服务器端并发执行（或占用线程池线程数）不能超过 10 个-->
    <dubbo:service interface="com.zxd.dubbo.learning.api.DemoService" ref="demoServiceImpl" protocol="dubbo" registry="qingdaoRegistry" executes="10" timeout="60000"/>
    <!--<dubbo:service interface="com.zxd.dubbo.learning.api.DemoService" ref="genericService" protocol="dubbo" registry="qingdaoRegistry"/>-->

    <!-- 具体实现该接口的 bean-->
    <bean id="demoServiceImpl" class="com.zxd.dubbo.learning.provider.DemoServiceImpl"/>
    <bean id="genericService" class="com.zxd.dubbo.learning.provider.MyGenericService"/>

    <bean id="callbackService" class="com.zxd.dubbo.learning.provider.CallbackServiceImpl" />
    <!--如果你的服务需要预热时间，比如初始化缓存，等待相关资源就位等，可以使用 delay 进行延迟暴露。-->
    <!--delay="-1"延迟到 Spring 初始化完成后，再暴露服务-->
    <dubbo:service interface="com.zxd.dubbo.learning.api.CallbackService" ref="callbackService" connections="1" callbacks="1000" delay="-1">
        <dubbo:method name="addListener">
            <dubbo:argument index="1" callback="true" />
            <!--也可以通过指定类型的方式-->
            <!--<dubbo:argument type="com.demo.CallbackListener" callback="true" />-->
        </dubbo:method>
    </dubbo:service>


</beans>